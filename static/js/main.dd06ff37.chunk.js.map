{"version":3,"sources":["logo.svg","Authenticate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Authenticate","props","state","error","logIn","bind","signUp","logOut","event","email","this","refs","value","password","promise","auth","signInWithEmailAndPassword","then","user","document","getElementById","classList","remove","catch","e","message","console","log","setState","createUserWithEmailAndPassword","database","ref","uid","set","err","signOut","add","id","type","placeholder","onClick","className","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,yOCCrCC,EAAWC,EAAQ,IAyBzBD,EAASE,cAXY,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iB,IAgHFC,E,YA5Bf,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACTC,MAAM,IAEV,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBACd,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,gBARG,E,mEA9ETG,GAAQ,IAAD,OACHC,EAAQC,KAAKC,KAAKF,MAAMG,MACxBC,EAAWH,KAAKC,KAAKE,SAASD,MAE9BE,EADOzB,EAAS0B,OACDC,2BAA2BP,EAAOI,GAEvDC,EAAQG,MAAK,SAAAC,GACIC,SAASC,eAAe,UAChCC,UAAUC,OAAO,WAK1BR,EAAQS,OAAM,SAAAC,GACV,IAAIrB,EAAQqB,EAAEC,QACdC,QAAQC,IAAIxB,GACZ,EAAKyB,SAAS,CAACzB,MAAMA,S,+BAIpB,IAAD,OACAM,EAAQC,KAAKC,KAAKF,MAAMG,MACxBC,EAAWH,KAAKC,KAAKE,SAASD,MACpCc,QAAQC,IAAIlB,EAAOI,GAEnB,IACMC,EADOzB,EAAS0B,OACDc,+BAA+BpB,EAAOI,GAE3DC,EACCG,MAAK,SAAAC,GAGJ7B,EAASyC,WAAWC,IAAI,SAAUb,EAAKA,KAAKc,KAAKC,IAAI,CACnDxB,MAAOS,EAAKA,KAAKT,QAEnBiB,QAAQC,IAAIT,GACZ,EAAKU,SAAS,CAACM,SALXA,OAONpB,EACCS,OAAM,SAAAC,GACL,IAAIU,EAAMV,EAAEC,QACZC,QAAQC,IAAIO,GACZ,EAAKN,SAAS,CAAEM,IAAKA,S,+BAOvB7C,EAAS0B,OAAOoB,UAEhB,IAAM5B,EAASY,SAASC,eAAe,UAIvCb,EAAOc,UAAUe,IAAI,Y,8CAmCvB,OACE,6BACM,6BAAK,2BAAOC,GAAG,QAAQC,KAAK,QAAQP,IAAI,QAAQQ,YAAY,WAC5D,6BACI,2BAAOF,GAAG,WAAWC,KAAK,WAAWP,IAAI,WAAWQ,YAAY,aAChE,2BAAI7B,KAAKR,MAAMgC,MAGnB,4BAAQM,QAAS9B,KAAKN,OAAtB,SACA,4BAAQoC,QAAS9B,KAAKJ,QAAtB,WACA,4BAAQmC,UAAU,OAAOJ,GAAG,SAASG,QAAS9B,KAAKH,QAAnD,gB,GArGemC,aCXZC,MAZf,WACE,OACE,yBAAKF,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKG,IAAKC,IAAMJ,UAAU,WAAWK,IAAI,SAEzC,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.dd06ff37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\nconst firebase = require('firebase');\n\n// var firebaseConfig = {\n//     apiKey: \"AIzaSyBVM0CWoVGIGR_GOkCi-2sI_ESO7CE20MY\",\n//     authDomain: \"loginauth-5c727.firebaseapp.com\",\n//     databaseURL: \"https://loginauth-5c727.firebaseio.com\",\n//     projectId: \"loginauth-5c727\",\n//     storageBucket: \"loginauth-5c727.appspot.com\",\n//     messagingSenderId: \"251965654313\",\n//     appId: \"1:251965654313:web:d1e018b9e3a81017b7e338\"\n// };\n// // Initialize Firebase\n// firebase.initializeApp(firebaseConfig);\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyD0EYybFgtDvcqnwOK90P6gQMs8y_2V1XY\",\n  authDomain: \"basic-survey.firebaseapp.com\",\n  databaseURL: \"https://basic-survey.firebaseio.com\",\n  projectId: \"basic-survey\",\n  storageBucket: \"basic-survey.appspot.com\",\n  messagingSenderId: \"91800356453\",\n  appId: \"1:91800356453:web:466dc5ef7d60141800a88c\",\n  measurementId: \"G-LK2Y5XFC4G\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nclass Authenticate extends Component {\n    logIn(event) {\n        const email = this.refs.email.value;\n        const password = this.refs.password.value;\n        const auth = firebase.auth();\n        const promise = auth.signInWithEmailAndPassword(email, password);\n\n        promise.then(user => {\n          const logOut = document.getElementById('logout');\n          logOut.classList.remove('hide')\n          // const err = \"Welcome you are logged in\"\n          // TODO: Write a welcome message for the user\n\n        })\n        promise.catch(e => {\n            var error = e.message;\n            console.log(error)\n            this.setState({error:error})\n        })\n    }\n\n    signUp(){\n      const email = this.refs.email.value;\n      const password = this.refs.password.value;\n      console.log(email, password);\n\n      const auth = firebase.auth();\n      const promise = auth.createUserWithEmailAndPassword(email, password);\n\n      promise\n      .then(user => {\n        // var err = \"Hey \" + user.email;\n        var err;\n        firebase.database().ref('users/'+ user.user.uid).set({\n          email: user.user.email\n        });\n        console.log(user);\n        this.setState({err:err});\n      });\n      promise\n      .catch(e => {\n        var err = e.message;\n        console.log(err);\n        this.setState({ err: err });\n\n      })\n    }\n\n\n    logOut(){\n      firebase.auth().signOut();\n\n      const logOut = document.getElementById('logout');\n\n      // TODO: Write a thanks message for the user\n      // const authMessage \"You have logged out\"\n      logOut.classList.add('hide')\n    };\n      //\n    //   promise\n    //   .then(user => {\n    //     var err ;\n\n    //     firebase.database().ref(\"users/\"+ user.uid).set({\n    //       email: user.email\n    //     });\n    //     console.log(user);\n    //     this.setState({err:err});\n    //     })\n\n    //   promise\n    //   .catch(e => {\n    //     var err = e.message;\n    //     console.log(err)\n    //     this.setState(({ err: err }));\n    //   });\n    // }\n    \n  \nconstructor(props) {\n  super(props)\n\n  this.state = {\n      error:''\n  }\n  this.logIn = this.logIn.bind(this);\n  this.signUp = this.signUp.bind(this);\n  this.logOut = this.logOut.bind(this);\n}\n\n  render() {\n    return (\n      <div>\n            <div><input id=\"email\" type=\"email\" ref=\"email\" placeholder=\"Email\" /></div>\n            <div>\n                <input id=\"password\" type=\"password\" ref=\"password\" placeholder=\"Password\" />\n                <p>{this.state.err}</p>\n                {/* <p>{authMessage}</p> */}\n            </div>\n            <button onClick={this.logIn}>Login</button>\n            <button onClick={this.signUp}>Sign Up</button>\n            <button className=\"hide\" id=\"logout\" onClick={this.logOut}>Log Out</button>\n      </div>\n    )\n  }\n}\n\nexport default Authenticate;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Authenticate from './Authenticate';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        \n        <Authenticate />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}